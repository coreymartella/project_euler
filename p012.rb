load 'common.rb'
def prime_factors(n)
  factors= []
  max_factor = (n*0.5).ceil
  if n % 2 == 0
    i = 2
    factor_count = 0
    while n % i == 0
      n/=i 
      factor_count += 1
    end
    factors << [i, factor_count]
  end
  3.step(max_factor,2) do |i|
    if n % i == 0
      factor_count = 0
      while n % i == 0
        n/=i 
        factor_count += 1
      end
      factors << [i, factor_count]
    end
    break if n == 1
  end
  factors << [n,1] if factors.empty?

  factors
end
def num_divisors(n)
  primes, powers = prime_factors(n).transpose
  powers.map{|i| i + 1}.reduce(:*)
end
def divisors(n)
  primes, powers = prime_factors(n).transpose
  exponents = powers.map{|i| (0..i).to_a}
  divisors = exponents.shift.product(*exponents).map do |powers|
    primes.zip(powers).map{|prime, power| prime ** power}.inject(:*)
  end
  divisors.sort
end
def p12(n=1)
  triangle_numbers = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]
  min_num = primes(8).reduce(:*) #first 8 primes multiplied togehter as 2 ^ 8 = 256 divisors
  while triangle_numbers.size <= 200000
    puts "generated #{triangle_numbers.size}" if triangle_numbers.size % 1000 == 0
    num = triangle_numbers.last + triangle_numbers.size+1
    triangle_numbers << num
    next unless num > min_num
    num_divisors = num_divisors(num)
    puts "num: #{num} has #{num_divisors} divisors"
    return num if num_divisors >= 500
  end
end

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1 
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
